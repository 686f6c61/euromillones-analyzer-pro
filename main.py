import sys
import os
from datetime import datetime
from modules.data_loader import DataLoader
from modules.analyzer import DataAnalyzer
from modules.predictor import Predictor
from modules.generator import CombinationGenerator
from modules.statistics import Statistics
from modules.visualizer import Visualizer
from modules.helpers import Helpers
import pandas as pd
from openpyxl import Workbook
from openpyxl.styles import Font, Alignment, PatternFill
from openpyxl.utils import get_column_letter

class EuromillonesApp:
    def __init__(self):
        self.helper = Helpers()
        self.loader = DataLoader()
        self.df = self.loader.load_data()
        self.analyzer = DataAnalyzer(self.df)
        self.predictor = Predictor(self.df)
        self.generator = CombinationGenerator(self.df)
        self.statistics = Statistics(self.df)
        self.visualizer = Visualizer()

    def run(self):
        """Ejecuta la aplicaci√≥n principal."""
        while True:
            self.show_main_menu()
            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.quick_analysis()
            elif option == "2":
                self.detailed_analysis()
            elif option == "3":
                self.predictions_menu()
            elif option == "4":
                self.combination_generator()
            elif option == "5":
                self.statistics_menu()
            elif option == "6":
                self.export_data()
            elif option == "7":
                print("\nüëã ¬°Hasta luego!")
                break
            else:
                print("\n‚ùå Opci√≥n no v√°lida. Por favor, intente de nuevo.")

            input("\nPresione Enter para continuar...")

    def show_main_menu(self):
        """Muestra el men√∫ principal."""
        print("\n=== üé≤ EUROMILLONES ANALYZER PRO üé≤ ===")
        print("\n1. An√°lisis R√°pido")
        print("2. An√°lisis Detallado")
        print("3. Predicciones")
        print("4. Generador de Combinaciones")
        print("5. Estad√≠sticas")
        print("6. Exportar Datos")
        print("7. Salir")

    def quick_analysis(self):
        """Men√∫ de an√°lisis r√°pido."""
        while True:
            self.helper.clear_screen()
            print("\n=== ‚ö° ANLISIS R√ÅPIDO ===")
            print("\n1. √öltimos 5 sorteos")
            print("2. N√∫meros m√°s frecuentes")
            print("3. Analizar mi combinaci√≥n")
            print("4. Estad√≠sticas r√°pidas")
            print("5. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.statistics.show_last_draws(5)
            elif option == "2":
                self.statistics.show_frequent_numbers()
            elif option == "3":
                self.analyzer.analyze_user_combination()
            elif option == "4":
                self.statistics.quick_stats()
            elif option == "5":
                break
            else:
                print("Opci√≥n no v√°lida. Intente de nuevo.")

            input("\nPresione Enter para continuar...")

    def detailed_analysis(self):
        """Men√∫ de an√°lisis detallado."""
        while True:
            self.helper.clear_screen()
            print("\n=== üîç AN√ÅLISIS DETALLADO ===")
            print("\n1. An√°lisis Temporal")
            print("2. An√°lisis de Patrones")
            print("3. An√°lisis de Correlaciones")
            print("4. An√°lisis de Estrellas")
            print("5. An√°lisis Personalizado")
            print("6. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.statistics.temporal_analysis()
            elif option == "2":
                self.statistics.pattern_analysis()
            elif option == "3":
                self.statistics.analyze_correlations()
            elif option == "4":
                self.analyzer.analyze_stars()
            elif option == "5":
                self.custom_analysis_menu()
            elif option == "6":
                break
            else:
                print("Opci√≥n no v√°lida. Intente de nuevo.")

            input("\nPresione Enter para continuar...")

    def temporal_analysis_menu(self):
        """Men√∫ de an√°lisis temporal."""
        while True:
            self.helper.clear_screen()
            print("\n=== üìÖ AN√ÅLISIS TEMPORAL ===")
            print("\n1. Tendencias mensuales")
            print("2. An√°lisis por estaciones")
            print("3. Comparaci√≥n a√±o actual vs anterior")
            print("4. An√°lisis de d√≠as de la semana")
            print("5. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.analyzer.analyze_monthly_trends()
            elif option == "2":
                self.analyzer.analyze_seasonal_trends()
            elif option == "3":
                self.analyzer.compare_current_vs_previous_year()
            elif option == "4":
                self.analyzer.analyze_weekday_trends()
            elif option == "5":
                break
            else:
                input("\n‚ùå Opci√≥n no v√°lida. Presione Enter para continuar...")

            input("\nPresione Enter para continuar...")

    def predictions_menu(self):
        """Men√∫ de predicciones."""
        while True:
            self.helper.clear_screen()
            print("\n=== üîÆ PREDICCIONES ===")
            print("\n1. N√∫meros calientes")
            print("2. N√∫meros fr√≠os")
            print("3. Predicci√≥n pr√≥ximo sorteo")
            print("4. An√°lisis probabil√≠stico")
            print("5. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.predictor.get_hot_numbers()
            elif option == "2":
                self.predictor.get_cold_numbers()
            elif option == "3":
                self.predictor.predict_next_draw()
            elif option == "4":
                self.statistics.get_probability_analysis()
            elif option == "5":
                break

            input("\nPresione Enter para continuar...")

    def combination_generator(self):
        """Men√∫ del generador de combinaciones."""
        while True:
            self.helper.clear_screen()
            print("\n=== üé≤ GENERADOR DE COMBINACIONES ===")
            print("\n1. Combinaci√≥n estad√≠stica")
            print("2. Combinaci√≥n equilibrada")
            print("3. Combinaci√≥n personalizada")
            print("4. M√∫ltiples combinaciones")
            print("5. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.generate_statistical_combination()
            elif option == "2":
                self.generate_balanced_combination()
            elif option == "3":
                self.generate_custom_combination()
            elif option == "4":
                self.generate_multiple_combinations()
            elif option == "5":
                break

            input("\nPresione Enter para continuar...")

    def statistics_menu(self):
        """Men√∫ de estad√≠sticas."""
        while True:
            self.helper.clear_screen()
            print("\n=== üìä ESTAD√çSTICAS ===")
            print("1. Estad√≠sticas b√°sicas")
            print("2. Estad√≠sticas avanzadas")
            print("3. An√°lisis estacional")
            print("4. An√°lisis de rachas")
            print("5. Informe completo")
            print("6. N√∫meros m√°s frecuentes y combinaciones")
            print("7. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.statistics.show_basic_stats()
            elif option == "2":
                self.statistics.get_advanced_stats()
            elif option == "3":
                self.statistics.get_seasonal_analysis()
            elif option == "4":
                self.statistics.streak_analysis()
            elif option == "5":
                self.statistics.get_complete_report()
            elif option == "6":
                self.statistics.show_frequent_numbers()
            elif option == "7":
                break
            else:
                print("Opci√≥n no v√°lida. Intente de nuevo.")

            input("\nPresione Enter para continuar...")

    def export_data(self):
        """Men√∫ de exportaci√≥n de datos."""
        while True:
            self.helper.clear_screen()
            print("\n=== üíæ EXPORTAR DATOS ===")
            print("\n1. Exportar a CSV")
            print("2. Exportar a Excel")
            print("3. Exportar a JSON")
            print("4. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                filename = input("Nombre del archivo (sin extensi√≥n): ") + ".csv"
                success, message = self.loader.export_data(filename, 'csv')
            elif option == "2":
                filename = input("Nombre del archivo (sin extensi√≥n): ") + ".xlsx"
                success, message = self.loader.export_data(filename, 'excel')
            elif option == "3":
                filename = input("Nombre del archivo (sin extensi√≥n): ") + ".json"
                success, message = self.loader.export_data(filename, 'json')
            elif option == "4":
                break

            if 'success' in locals():
                print(f"\n{'‚úÖ' if success else '‚ùå'} {message}")
            input("\nPresione Enter para continuar...")

    def analyze_my_combination(self):
        """Analiza una combinaci√≥n ingresada por el usuario."""
        print("\nüîç AN√ÅLISIS DE COMBINACI√ìN")
        try:
            numbers = []
            print("\nIngrese los n√∫meros (1-50):")
            for i in range(5):
                while True:
                    num = int(input(f"N√∫mero {i+1}: "))
                    valid, message = self.helper.validate_number_range(num, 1, 50)
                    if valid and num not in numbers:
                        numbers.append(num)
                        break
                    print(f"‚ùå {message}")

            stars = []
            print("\nIngrese las estrellas (1-12):")
            for i in range(2):
                while True:
                    star = int(input(f"Estrella {i+1}: "))
                    valid, message = self.helper.validate_number_range(star, 1, 12)
                    if valid and star not in stars:
                        stars.append(star)
                        break
                    print(f"‚ùå {message}")

            self.analyzer.analyze_combination(numbers, stars)
            
        except ValueError:
            print("\n‚ùå Error: Debe introducir n√∫meros v√°lidos")

    def custom_analysis_menu(self):
        """Men√∫ de an√°lisis personalizado."""
        while True:
            print("\n=== üéØ AN√ÅLISIS PERSONALIZADO ===")
            print("1. An√°lisis por rango de fechas")
            print("2. An√°lisis por n√∫mero espec√≠fico")
            print("3. B√∫squeda por patr√≥n")
            print("4. Volver")

            option = input("\nSeleccione una opci√≥n: ")

            if option == "1":
                self.date_range_analysis()
            elif option == "2":
                self.single_number_analysis()
            elif option == "3":
                self.pattern_search()
            elif option == "4":
                break
            else:
                print("Opci√≥n no v√°lida. Intente de nuevo.")

            input("\nPresione Enter para continuar...")

    def date_range_analysis(self):
        """An√°lisis por rango de fechas."""
        print("\nüìÖ AN√ÅLISIS POR RANGO DE FECHAS")
        
        # Obtener fechas de inicio y fin
        start_date = input("Ingrese la fecha de inicio (DD-MM-YYYY): ")
        end_date = input("Ingrese la fecha de fin (DD-MM-YYYY): ")
        
        try:
            start_date = datetime.strptime(start_date, "%d-%m-%Y")
            end_date = datetime.strptime(end_date, "%d-%m-%Y")
        except ValueError:
            print("‚ùå Formato de fecha inv√°lido. Use DD-MM-YYYY.")
            return
        
        # Filtrar el DataFrame por el rango de fechas
        mask = (self.loader.df['fecha'] >= start_date) & (self.loader.df['fecha'] <= end_date)
        df_filtered = self.loader.df.loc[mask]
        
        if df_filtered.empty:
            print("‚ùå No hay datos para el rango de fechas especificado.")
            return
        
        # Realizar an√°lisis en el rango de fechas
        print(f"\nAn√°lisis para el per√≠odo {start_date.date()} a {end_date.date()}:")
        print(f"N√∫mero de sorteos: {len(df_filtered)}")
        
        # An√°lisis de n√∫meros m√°s frecuentes
        numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros.extend(df_filtered[col].tolist())
        
        freq = pd.Series(numeros).value_counts().head(10)
        print("\nN√∫meros m√°s frecuentes:")
        for num, count in freq.items():
            print(f"N√∫mero {num}: {count} apariciones")
        
        # An√°lisis de estrellas m√°s frecuentes
        estrellas = []
        for col in ['e1', 'e2']:
            estrellas.extend(df_filtered[col].tolist())
        
        freq_estrellas = pd.Series(estrellas).value_counts().head(5)
        print("\nEstrellas m√°s frecuentes:")
        for star, count in freq_estrellas.items():
            print(f"Estrella {star}: {count} apariciones")

    def single_number_analysis(self):
        """An√°lisis por n√∫mero espec√≠fico."""
        print("\n AN√ÅLISIS POR N√öMERO ESPEC√çFICO")
        
        number = Helpers.get_valid_input(
            "Ingrese un n√∫mero (1-50): ", 
            int, 
            lambda x: 1 <= x <= 50
        )
        
        # An√°lisis del n√∫mero
        apariciones = sum((self.loader.df[col] == number).sum() for col in ['n1', 'n2', 'n3', 'n4', 'n5'])
        porcentaje = (apariciones / len(self.loader.df)) * 100
        
        print(f"\nAn√°lisis para el n√∫mero {number}:")
        print(f"Apariciones totales: {apariciones}")
        print(f"Porcentaje de sorteos: {porcentaje:.2f}%")
        
        # √öltima aparici√≥n
        ultima_aparicion = None
        for _, row in self.loader.df.iterrows():
            if number in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]:
                ultima_aparicion = row['fecha']
                break
        
        if ultima_aparicion:
            dias_desde_ultima = (datetime.now().date() - ultima_aparicion.date()).days
            print(f"√öltima aparici√≥n: {ultima_aparicion.strftime('%d-%m-%Y')} ({dias_desde_ultima} d√≠as atr√°s)")
        else:
            print("Este n√∫mero nunca ha salido.")

    def pattern_search(self):
        """B√∫squeda por patr√≥n."""
        print("\nüîç B√öSQUEDA POR PATR√ìN")
        
        print("Ingrese el patr√≥n de b√∫squeda (use 'X' para cualquier n√∫mero):")
        pattern = []
        for i in range(5):
            while True:
                value = input(f"Posici√≥n {i+1}: ").upper()
                if value == 'X' or (value.isdigit() and 1 <= int(value) <= 50):
                    pattern.append(value)
                    break
                print("Entrada inv√°lida. Use 'X' o un nmero entre 1 y 50.")
        
        # Buscar coincidencias
        coincidencias = []
        for _, row in self.loader.df.iterrows():
            if all((p == 'X' or int(p) == row[f'n{i+1}']) for i, p in enumerate(pattern)):
                coincidencias.append(row)
        
        if coincidencias:
            print(f"\nSe encontraron {len(coincidencias)} coincidencias:")
            for row in coincidencias:
                numeros = ' - '.join(map(str, [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]))
                estrellas = f"{row['e1']} - {row['e2']}"
                print(f"{row['fecha'].strftime('%d-%m-%Y')}: {numeros} | Estrellas: {estrellas}")
        else:
            print("No se encontraron coincidencias para el patr√≥n especificado.")

    def generate_statistical_combination(self):
        combinations = self.generator.generate_statistical(num_combinations=1)
        self.generator.evaluate_combinations(combinations)

    def generate_balanced_combination(self):
        combinations = self.generator.generate_balanced(num_combinations=1)
        self.generator.evaluate_combinations(combinations)

    def generate_custom_combination(self):
        # Implementar l√≥gica para obtener n√∫meros forzados y prohibidos del usuario
        forced_numbers = []
        forbidden_numbers = []
        combinations = self.generator.generate_custom(forced_numbers, forbidden_numbers, num_combinations=1)
        self.generator.evaluate_combinations(combinations)

    def generate_multiple_combinations(self):
        num_combinations = int(input("¬øCu√°ntas combinaciones desea generar? "))
        combinations = self.generator.generate_smart(num_combinations=num_combinations)
        self.generator.evaluate_combinations(combinations)

    def generate_full_report(self):
        print("\nüìä GENERANDO INFORME COMPLETO")
        
        wb = Workbook()
        
        try:
            self._generate_basic_stats(wb)
            print("Estad√≠sticas b√°sicas generadas")
        except Exception as e:
            print(f"Error al generar estad√≠sticas b√°sicas: {str(e)}")
        
        try:
            self._generate_number_frequency(wb)
            print("An√°lisis de frecuencia de n√∫meros generado")
        except Exception as e:
            print(f"Error al generar frecuencia de n√∫meros: {str(e)}")
        
        try:
            self._generate_star_frequency(wb)
            print("An√°lisis de frecuencia de estrellas generado")
        except Exception as e:
            print(f"Error al generar frecuencia de estrellas: {str(e)}")
        
        try:
            self._generate_hot_cold_numbers(wb)
            print("An√°lisis de n√∫meros calientes y fr√≠os generado")
        except Exception as e:
            print(f"Error al generar n√∫meros calientes y fr√≠os: {str(e)}")
        
        try:
            self._generate_predictions(wb)
            print("Predicciones generadas")
        except Exception as e:
            print(f"Error al generar predicciones: {str(e)}")
        
        try:
            self._generate_patterns(wb)
            print("An√°lisis de patrones generado")
        except Exception as e:
            print(f"Error al generar an√°lisis de patrones: {str(e)}")
        
        try:
            self._generate_combination_analysis(wb)
            print("An√°lisis de combinaciones generado")
        except Exception as e:
            print(f"Error al generar an√°lisis de combinaciones: {str(e)}")
        
        filename = "Informe_Euromillones.xlsx"
        wb.save(filename)
        print(f"\nInforme completo generado y guardado como {filename}")

    def _generate_basic_stats(self, wb):
        ws = wb.active
        ws.title = "Estad√≠sticas B√°sicas"
        ws.append(["Estad√≠sticas B√°sicas del Euromillones"])
        ws.append([])
        
        stats = self.statistics.show_basic_stats()
        for stat in stats:
            ws.append(stat)
        
        self._format_worksheet(ws)

    def _generate_number_frequency(self, wb):
        ws = wb.create_sheet("Frecuencia de N√∫meros")
        ws.append(["Frecuencia de N√∫meros"])
        ws.append([])
        
        freq_data = self.statistics.number_frequency_analysis()
        ws.append(["N√∫mero", "Frecuencia", "Porcentaje", "Desviaci√≥n"])
        for row in freq_data:
            ws.append(row)
        
        self._format_worksheet(ws)

    def _generate_star_frequency(self, wb):
        ws = wb.create_sheet("Frecuencia de Estrellas")
        ws.append(["Frecuencia de Estrellas"])
        ws.append([])
        
        star_data = self.statistics.star_frequency_analysis()
        ws.append(["Estrella", "Frecuencia", "Porcentaje", "Desviaci√≥n"])
        for row in star_data:
            ws.append(row)
        
        self._format_worksheet(ws)

    def _generate_hot_cold_numbers(self, wb):
        ws = wb.create_sheet("N√∫meros Calientes y Fr√≠os")
        ws.append(["N√∫meros Calientes y Fr√≠os"])
        ws.append([])
        
        hot_numbers = self.predictor.get_hot_numbers()
        cold_numbers = self.predictor.get_cold_numbers()
        
        ws.append(["N√∫meros Calientes"])
        ws.append(["N√∫mero", "Frecuencia", "Porcentaje", "Tendencia"])
        for row in hot_numbers:
            ws.append(row)
        
        ws.append([])
        ws.append(["N√∫meros Fr√≠os"])
        ws.append(["N√∫mero", "Frecuencia", "Porcentaje", "Tendencia"])
        for row in cold_numbers:
            ws.append(row)
        
        self._format_worksheet(ws)

    def _generate_predictions(self, wb):
        ws = wb.create_sheet("Predicciones")
        ws.append(["Predicciones para el Pr√≥ximo Sorteo"])
        ws.append([])
        
        prediction = self.predictor.predict_next_draw()
        ws.append(["N√∫meros Predichos", "Estrellas Predichas"])
        ws.append([" - ".join(map(str, prediction['numbers'])), " - ".join(map(str, prediction['stars']))])
        
        ws.append([])
        ws.append(["An√°lisis de la Predicci√≥n"])
        for key, value in prediction['analysis'].items():
            ws.append([key, value])
        
        self._format_worksheet(ws)

    def _generate_patterns(self, wb):
        ws = wb.create_sheet("Patrones")
        ws.append(["Patrones Identificados"])
        ws.append([])
        
        patterns = self.analyzer.identify_patterns()
        for pattern_name, pattern_data in patterns.items():
            ws.append([pattern_name])
            for key, value in pattern_data.items():
                ws.append([key, value])
            ws.append([])
        
        self._format_worksheet(ws)

    def _generate_combination_analysis(self, wb):
        ws = wb.create_sheet("An√°lisis de Combinaciones")
        ws.append(["An√°lisis de Combinaciones"])
        ws.append([])
        
        combination_data = self.analyzer.analyze_combinations()
        for section, data in combination_data.items():
            ws.append([section])
            for key, value in data.items():
                ws.append([key, value])
            ws.append([])
        
        self._format_worksheet(ws)

    def _format_worksheet(self, ws):
        for row in ws.iter_rows():
            for cell in row:
                cell.alignment = Alignment(horizontal='center', vertical='center')
        
        for col in ws.columns:
            max_length = 0
            column = col[0].column_letter
            for cell in col:
                try:
                    if len(str(cell.value)) > max_length:
                        max_length = len(cell.value)
                except:
                    pass
            adjusted_width = (max_length + 2)
            ws.column_dimensions[column].width = adjusted_width

        header_font = Font(bold=True)
        header_fill = PatternFill(start_color="DDDDDD", end_color="DDDDDD", fill_type="solid")
        
        for cell in ws[1]:
            cell.font = header_font
            cell.fill = header_fill

if __name__ == "__main__":
    try:
        app = EuromillonesApp()
        app.run()
    except KeyboardInterrupt:
        print("\n\nüëã ¬°Hasta luego!")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {str(e)}")
        Helpers.log_error(e)
        sys.exit(1)
