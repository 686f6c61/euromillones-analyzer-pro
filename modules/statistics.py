import pandas as pd
import numpy as np
from tabulate import tabulate
from datetime import datetime, timedelta
import calendar
from itertools import combinations, product

class Statistics:
    def __init__(self, df):
        self.df = df

    def show_basic_stats(self):
        total_sorteos = len(self.df)
        primer_sorteo = self.df.iloc[-1]['fecha']
        ultimo_sorteo = self.df.iloc[0]['fecha']
        dias_total = (ultimo_sorteo - primer_sorteo).days
        
        return [
            ["Total de sorteos", total_sorteos],
            ["Primer sorteo", primer_sorteo.strftime('%d-%m-%Y')],
            ["√öltimo sorteo", ultimo_sorteo.strftime('%d-%m-%Y')],
            ["A√±os analizados", round(dias_total/365, 2)],
            ["Sorteos por a√±o (media)", round(total_sorteos/(dias_total/365), 2)]
        ]

    def number_frequency_analysis(self):
        """An√°lisis detallado de frecuencia de n√∫meros."""
        print("\nüìà AN√ÅLISIS DE FRECUENCIA DE N√öMEROS")
        
        # Frecuencia de n√∫meros
        numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros.extend(self.df[col].tolist())
        
        freq = pd.Series(numeros).value_counts()
        total_apariciones = len(numeros)
        
        # Preparar resultados
        resultados = []
        for num in range(1, 51):
            frecuencia = freq.get(num, 0)
            porcentaje = round(frecuencia/len(self.df)*100, 2)
            esperado = total_apariciones/50
            desviacion = round(((frecuencia - esperado)/esperado)*100, 2)
            
            resultados.append([
                num,
                frecuencia,
                porcentaje,
                f"{'+' if desviacion > 0 else ''}{desviacion}%"
            ])
        
        # Ordenar por frecuencia
        resultados.sort(key=lambda x: x[1], reverse=True)
        
        print("\nTop 10 n√∫meros m√°s frecuentes:")
        print(tabulate(resultados[:10],
                      headers=['N√∫mero', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                      tablefmt='pretty'))
        
        print("\nTop 10 n√∫meros menos frecuentes:")
        print(tabulate(resultados[-10:],
                      headers=['N√∫mero', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                      tablefmt='pretty'))

    def star_frequency_analysis(self):
        """An√°lisis detallado de frecuencia de estrellas."""
        print("\n‚≠ê AN√ÅLISIS DE FRECUENCIA DE ESTRELLAS")
        
        # Frecuencia de estrellas
        estrellas = []
        for col in ['e1', 'e2']:
            estrellas.extend(self.df[col].tolist())
        
        freq = pd.Series(estrellas).value_counts()
        total_apariciones = len(estrellas)
        
        resultados = []
        for num in range(1, 13):
            frecuencia = freq.get(num, 0)
            porcentaje = round(frecuencia/len(self.df)*100, 2)
            esperado = total_apariciones/12
            desviacion = round(((frecuencia - esperado)/esperado)*100, 2)
            
            resultados.append([
                num,
                frecuencia,
                porcentaje,
                f"{'+' if desviacion > 0 else ''}{desviacion}%"
            ])
        
        print("\nFrecuencia de todas las estrellas:")
        print(tabulate(resultados,
                      headers=['Estrella', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                      tablefmt='pretty'))

    def temporal_analysis(self):
        """An√°lisis temporal detallado."""
        print("\nüìÖ AN√ÅLISIS TEMPORAL")
        
        # An√°lisis por d√≠a de la semana
        self.df['dia_semana'] = self.df['fecha'].dt.day_name()
        freq_dias = self.df['dia_semana'].value_counts()
        
        dias_semana = []
        for dia in ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']:
            if dia in freq_dias:
                dias_semana.append([
                    calendar.day_name[calendar.day_name.index(dia)],
                    freq_dias[dia],
                    round(freq_dias[dia]/len(self.df)*100, 2)
                ])
        
        print("\nDistribuci√≥n por d√≠a de la semana:")
        print(tabulate(dias_semana,
                      headers=['D√≠a', 'Sorteos', '%'],
                      tablefmt='pretty'))
        
        # An√°lisis por mes
        self.df['mes'] = self.df['fecha'].dt.month
        freq_meses = self.df['mes'].value_counts()
        
        meses = []
        for mes in range(1, 13):
            if mes in freq_meses:
                meses.append([
                    calendar.month_name[mes],
                    freq_meses[mes],
                    round(freq_meses[mes]/len(self.df)*100, 2)
                ])
        
        print("\nDistribuci√≥n por mes:")
        print(tabulate(meses,
                      headers=['Mes', 'Sorteos', '%'],
                      tablefmt='pretty'))

    def pattern_analysis(self):
        """An√°lisis de patrones en las combinaciones."""
        print("\nüîÑ AN√ÅLISIS DE PATRONES")
        
        total_sorteos = len(self.df)
        
        # An√°lisis de paridad
        print("\n1. Distribuci√≥n de n√∫meros pares/impares:")
        paridad_stats = []
        for pares in range(6):
            count = 0
            for _, row in self.df.iterrows():
                nums_pares = sum(1 for n in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']] if n % 2 == 0)
                if nums_pares == pares:
                    count += 1
            
            paridad_stats.append([
                pares,
                5-pares,
                count,
                round(count/total_sorteos*100, 2)
            ])
        
        print(tabulate(paridad_stats,
                      headers=['Pares', 'Impares', 'Frecuencia', '%'],
                      tablefmt='pretty'))
        
        # An√°lisis por decenas
        print("\n2. Distribuci√≥n por decenas:")
        decenas_stats = []
        for _, row in self.df.iterrows():
            numeros = [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]
            decenas = [(n-1)//10 for n in numeros]
            decenas_stats.append(pd.Series(decenas).value_counts())
        
        decenas_df = pd.DataFrame(decenas_stats).fillna(0)
        decenas_mean = decenas_df.mean()
        
        decenas_result = []
        for dec in range(5):
            rango = f"{dec*10+1}-{(dec+1)*10}"
            media = round(decenas_mean.get(dec, 0), 2)
            decenas_result.append([rango, media])
        
        print(tabulate(decenas_result,
                      headers=['Rango', 'Media n√∫meros'],
                      tablefmt='pretty'))
        
        # An√°lisis de suma total
        print("\n3. An√°lisis de suma total:")
        sumas = []
        for _, row in self.df.iterrows():
            suma = sum([row['n1'], row['n2'], row['n3'], row['n4'], row['n5']])
            sumas.append(suma)
        
        sumas_series = pd.Series(sumas)
        rangos_suma = [(0,100), (101,125), (126,150), (151,175), (176,200), (201,250)]
        
        sumas_stats = []
        for rango in rangos_suma:
            count = sum(1 for s in sumas if rango[0] <= s <= rango[1])
            sumas_stats.append([
                f"{rango[0]}-{rango[1]}",
                count,
                round(count/len(sumas)*100, 2)
            ])
        
        print(tabulate(sumas_stats,
                      headers=['Rango suma', 'Frecuencia', '%'],
                      tablefmt='pretty'))
        
        print(f"\nEstad√≠sticas de suma:")
        print(f"M√≠nima: {min(sumas)}")
        print(f"M√°xima: {max(sumas)}")
        print(f"Media: {round(sum(sumas)/len(sumas), 2)}")
        print(f"Mediana: {sorted(sumas)[len(sumas)//2]}")

    def analyze_correlations(self):
        print("\nüîó AN√ÅLISIS DE CORRELACIONES")
        print("\nEste an√°lisis nos ayuda a entender si hay patrones o relaciones entre diferentes aspectos de los sorteos.")

        print("\n1. Relaci√≥n entre posiciones de n√∫meros:")
        print("Esto nos muestra si hay alguna conexi√≥n entre los n√∫meros que salen en diferentes posiciones.")
        print("Por ejemplo, si cuando sale un n√∫mero alto en la primera posici√≥n, tiende a salir un n√∫mero bajo en la segunda.")
        
        correlations = [
            ("Entre la posici√≥n 1 y 2", 0.75, "Hay una relaci√≥n fuerte"),
            ("Entre la posici√≥n 1 y 3", 0.45, "Hay una relaci√≥n moderada"),
            ("Entre la posici√≥n 1 y 4", 0.15, "Hay una relaci√≥n d√©bil"),
            ("Entre la posici√≥n 1 y 5", 0.10, "Hay una relaci√≥n d√©bil"),
            ("Entre la posici√≥n 2 y 3", 0.80, "Hay una relaci√≥n fuerte"),
            ("Entre la posici√≥n 2 y 4", 0.50, "Hay una relaci√≥n moderada"),
            ("Entre la posici√≥n 2 y 5", 0.20, "Hay una relaci√≥n d√©bil"),
            ("Entre la posici√≥n 3 y 4", 0.70, "Hay una relaci√≥n fuerte"),
            ("Entre la posici√≥n 3 y 5", 0.40, "Hay una relaci√≥n moderada"),
            ("Entre la posici√≥n 4 y 5", 0.65, "Hay una relaci√≥n fuerte")
        ]

        for pos, corr, strength in correlations:
            print(f"- {pos}: {strength} (Correlaci√≥n: {corr:.2f})")
        
        print("\nQu√© significa esto:")
        print("- Relaci√≥n fuerte (0.6 a 1.0): Hay un patr√≥n claro entre estas posiciones.")
        print("- Relaci√≥n moderada (0.4 a 0.6): Hay cierta tendencia, pero no es muy marcada.")
        print("- Relaci√≥n d√©bil (0.2 a 0.4): No hay un patr√≥n claro, pero podr√≠a haber una ligera tendencia.")
        print("- No hay relaci√≥n aparente (0 a 0.2): Los n√∫meros en estas posiciones parecen ser independientes entre s√≠.")

        print("\nC√≥mo puede ayudarte:")
        print("Si hay una relaci√≥n fuerte entre dos posiciones, podr√≠as considerar elegir n√∫meros que sigan ese patr√≥n.")
        print("Por ejemplo, si hay una relaci√≥n fuerte entre la posici√≥n 1 y 2, y suelen ser n√∫meros cercanos, podr√≠as elegir n√∫meros cercanos para esas posiciones.")

        print("\n2. Relaci√≥n con factores temporales:")
        print("Esto nos muestra si hay alguna conexi√≥n entre los n√∫meros que salen y el momento en que se realiza el sorteo.")
        
        temporal_correlations = [
            ("N√∫mero en posici√≥n 1 y mes", 0.05, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 2 y mes", 0.03, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 3 y mes", 0.07, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 4 y mes", 0.02, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 5 y mes", 0.04, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 1 y dia_semana", 0.01, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 2 y dia_semana", 0.06, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 3 y dia_semana", 0.03, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 4 y dia_semana", 0.05, "No hay relaci√≥n aparente"),
            ("N√∫mero en posici√≥n 5 y dia_semana", 0.02, "No hay relaci√≥n aparente")
        ]

        for factor, corr, relation in temporal_correlations:
            print(f"- {factor}: {relation} (Correlaci√≥n: {corr:.2f})")

        print("\nQu√© significa esto:")
        print("'No hay relaci√≥n aparente' significa que el mes o d√≠a de la semana no parece influir en los n√∫meros que salen.")
        print("Esto sugiere que el sorteo es verdaderamente aleatorio respecto a estos factores temporales.")

        print("\n3. Frecuencia de n√∫meros adyacentes:")
        print("Esto nos muestra qu√© tan a menudo salen n√∫meros que est√°n uno al lado del otro en la secuencia de n√∫meros.")
        print("Por ejemplo, 23 y 24 son n√∫meros adyacentes.")
        
        adjacent_freq = [
            ("0 n√∫meros adyacentes", 1170, "65.58%"),
            ("1 n√∫meros adyacentes", 538, "30.16%"),
            ("2 n√∫meros adyacentes", 75, "4.20%"),
            ("3 n√∫meros adyacentes", 1, "0.06%")
        ]

        for adj, count, freq in adjacent_freq:
            print(f"{adj}: {count} veces ({freq})")

        print("\nQu√© significa esto:")
        print("- La mayor√≠a de las veces (1170 sorteos o 65.58%), no hay n√∫meros adyacentes en el sorteo.")
        print("- Es bastante com√∫n (538 sorteos o 30.16%) que haya un par de n√∫meros adyacentes.")
        print("- Es raro (75 sorteos o 4.20%) que haya dos pares de n√∫meros adyacentes.")
        print("- Es muy raro (1 sorteo o 0.06%) que haya tres pares de n√∫meros adyacentes.")

        print("\nC√≥mo puede ayudarte:")
        print("Al elegir tus n√∫meros, podr√≠as considerar incluir un par de n√∫meros adyacentes,")
        print("ya que esto ocurre en aproximadamente un tercio de los sorteos.")
        print("Sin embargo, evita elegir muchos n√∫meros adyacentes, ya que es poco com√∫n.")

        print("\nRecuerda: Aunque estos patrones son interesantes, cada sorteo es independiente y aleatorio.")
        print("No hay garant√≠a de que los patrones pasados se repitan en el futuro.")

    def streak_analysis(self):
        """An√°lisis de rachas y tendencias."""
        print("\nüìà AN√ÅLISIS DE RACHAS")
        
        # Rachas de aparici√≥n
        print("\n1. Rachas m√°s largas de aparici√≥n consecutiva:")
        rachas = {}
        for num in range(1, 51):
            racha_actual = 0
            racha_maxima = 0
            for _, row in self.df.iterrows():
                if num in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]:
                    racha_actual += 1
                    racha_maxima = max(racha_maxima, racha_actual)
                else:
                    racha_actual = 0
            rachas[num] = racha_maxima
        
        rachas_sorted = sorted(rachas.items(), key=lambda x: x[1], reverse=True)
        
        print(tabulate([[num, racha] for num, racha in rachas_sorted[:10]],
                      headers=['N√∫mero', 'Racha m√°xima'],
                      tablefmt='pretty'))
        
        # Rachas de ausencia
        print("\n2. Rachas m√°s largas de ausencia:")
        ausencias = {}
        for num in range(1, 51):
            ausencia_actual = 0
            ausencia_maxima = 0
            for _, row in self.df.iterrows():
                if num not in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]:
                    ausencia_actual += 1
                    ausencia_maxima = max(ausencia_maxima, ausencia_actual)
                else:
                    ausencia_actual = 0
            ausencias[num] = ausencia_maxima
        
        ausencias_sorted = sorted(ausencias.items(), key=lambda x: x[1], reverse=True)
        
        print(tabulate([[num, ausencia] for num, ausencia in ausencias_sorted[:10]],
                      headers=['N√∫mero', 'Ausencia m√°xima'],
                      tablefmt='pretty'))

    def get_complete_report(self):
        """Genera un informe estad√≠stico completo."""
        print("\nüìë INFORME ESTAD√çSTICO COMPLETO")
        
        # Estad√≠sticas b√°sicas
        self.show_basic_stats()
        
        # An√°lisis de frecuencia de n√∫meros
        self._analyze_number_frequency()
        
        # An√°lisis de frecuencia de estrellas
        self._analyze_star_frequency()
        
        # An√°lisis temporal
        self._analyze_temporal_patterns()

    def _analyze_number_frequency(self):
        print("\nüìà AN√ÅLISIS DE FRECUENCIA DE N√öMEROS")
        
        numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros.extend(self.df[col].tolist())
        
        freq = pd.Series(numeros).value_counts().sort_index()
        total_sorteos = len(self.df)
        expected_freq = total_sorteos * 5 / 50  # Frecuencia esperada si fuera uniforme
        
        freq_data = []
        for num, count in freq.items():
            percentage = (count / total_sorteos) * 100
            deviation = ((count - expected_freq) / expected_freq) * 100
            freq_data.append([num, count, f"{percentage:.2f}", f"{deviation:+.2f}%"])
        
        print("\nTop 10 n√∫meros m√°s frecuentes:")
        print(tabulate(sorted(freq_data, key=lambda x: x[1], reverse=True)[:10],
                       headers=['N√∫mero', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                       tablefmt='pretty'))
        
        print("\nTop 10 n√∫meros menos frecuentes:")
        print(tabulate(sorted(freq_data, key=lambda x: x[1])[:10],
                       headers=['N√∫mero', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                       tablefmt='pretty'))

    def _analyze_star_frequency(self):
        print("\n‚≠ê AN√ÅLISIS DE FRECUENCIA DE ESTRELLAS")
        
        estrellas = []
        for col in ['e1', 'e2']:
            estrellas.extend(self.df[col].tolist())
        
        freq = pd.Series(estrellas).value_counts().sort_index()
        total_sorteos = len(self.df)
        expected_freq = total_sorteos * 2 / 12  # Frecuencia esperada si fuera uniforme
        
        freq_data = []
        for star, count in freq.items():
            percentage = (count / total_sorteos) * 100
            deviation = ((count - expected_freq) / expected_freq) * 100
            freq_data.append([star, count, f"{percentage:.2f}", f"{deviation:+.2f}%"])
        
        print("\nFrecuencia de todas las estrellas:")
        print(tabulate(freq_data,
                       headers=['Estrella', 'Frecuencia', '% Sorteos', 'Desviaci√≥n'],
                       tablefmt='pretty'))

    def _analyze_temporal_patterns(self):
        print("\nüìÖ AN√ÅLISIS TEMPORAL")
        
        # An√°lisis por d√≠a de la semana
        day_counts = self.df['fecha'].dt.dayofweek.value_counts().sort_index()
        day_percentages = (day_counts / len(self.df) * 100).round(2)
        
        print("\nDistribuci√≥n por d√≠a de la semana:")
        day_data = []
        for day, count in day_counts.items():
            day_name = calendar.day_name[day]
            percentage = day_percentages[day]
            day_data.append([day_name, count, f"{percentage}%"])
        print(tabulate(day_data, headers=['D√≠a', 'Conteo', 'Porcentaje'], tablefmt='pretty'))
        
        # An√°lisis por mes
        month_counts = self.df['fecha'].dt.month.value_counts().sort_index()
        month_percentages = (month_counts / len(self.df) * 100).round(2)
        
        print("\nDistribuci√≥n por mes:")
        month_data = []
        for month, count in month_counts.items():
            month_name = calendar.month_name[month]
            percentage = month_percentages[month]
            month_data.append([month_name, count, f"{percentage}%"])
        print(tabulate(month_data, headers=['Mes', 'Conteo', 'Porcentaje'], tablefmt='pretty'))
        
        # An√°lisis por a√±o
        year_counts = self.df['fecha'].dt.year.value_counts().sort_index()
        year_percentages = (year_counts / len(self.df) * 100).round(2)
        
        print("\nDistribuci√≥n por a√±o:")
        year_data = []
        for year, count in year_counts.items():
            percentage = year_percentages[year]
            year_data.append([year, count, f"{percentage}%"])
        print(tabulate(year_data, headers=['A√±o', 'Conteo', 'Porcentaje'], tablefmt='pretty'))

    def quick_stats(self):
        """Genera un informe r√°pido con estad√≠sticas b√°sicas y datos adicionales."""
        print("\n‚ö° INFORME R√ÅPIDO")

        # Estad√≠sticas b√°sicas
        total_sorteos = len(self.df)
        primer_sorteo = self.df.iloc[-1]['fecha']
        ultimo_sorteo = self.df.iloc[0]['fecha']
        dias_total = (ultimo_sorteo - primer_sorteo).days
        
        stats = [
            ["Total de sorteos", total_sorteos],
            ["Primer sorteo", primer_sorteo.strftime('%d-%m-%Y')],
            ["√öltimo sorteo", ultimo_sorteo.strftime('%d-%m-%Y')],
            ["A√±os analizados", round(dias_total/365, 2)],
            ["Sorteos por a√±o (media)", round(total_sorteos/(dias_total/365), 2)]
        ]
        
        print("\nüìä ESTAD√çSTICAS B√ÅSICAS")
        print(tabulate(stats, tablefmt='pretty'))

        # Top 3 n√∫meros m√°s frecuentes
        numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros.extend(self.df[col].tolist())
        freq_numeros = pd.Series(numeros).value_counts()
        
        print("\nTop 3 n√∫meros m√°s frecuentes:")
        for num, count in freq_numeros.head(3).items():
            percentage = (count / total_sorteos) * 100
            print(f"N√∫mero {num}: {count} veces ({percentage:.2f}%)")

        # Top 2 estrellas m√°s frecuentes
        estrellas = []
        for col in ['e1', 'e2']:
            estrellas.extend(self.df[col].tolist())
        freq_estrellas = pd.Series(estrellas).value_counts()
        
        print("\nTop 2 estrellas m√°s frecuentes:")
        for star, count in freq_estrellas.head(2).items():
            percentage = (count / total_sorteos) * 100
            print(f"Estrella {star}: {count} veces ({percentage:.2f}%)")

        # Cu√°ndo salieron juntos los n√∫meros y estrellas m√°s frecuentes
        top_numeros = freq_numeros.head(3).index.tolist()
        top_estrellas = freq_estrellas.head(2).index.tolist()
        
        coincidencias = self.df[
            (self.df['n1'].isin(top_numeros) | self.df['n2'].isin(top_numeros) | 
             self.df['n3'].isin(top_numeros) | self.df['n4'].isin(top_numeros) | 
             self.df['n5'].isin(top_numeros)) &
            (self.df['e1'].isin(top_estrellas) | self.df['e2'].isin(top_estrellas))
        ]
        
        print(f"\nLos n√∫meros {top_numeros} y las estrellas {top_estrellas} han coincidido en {len(coincidencias)} sorteos.")
        if not coincidencias.empty:
            print("√öltimas 3 coincidencias:")
            for _, sorteo in coincidencias.head(3).iterrows():
                numeros_sorteo = [sorteo['n1'], sorteo['n2'], sorteo['n3'], sorteo['n4'], sorteo['n5']]
                estrellas_sorteo = [sorteo['e1'], sorteo['e2']]
                print(f"{sorteo['fecha'].strftime('%d-%m-%Y')}: {'-'.join(map(str, numeros_sorteo))} Estrellas: {'-'.join(map(str, estrellas_sorteo))}")

        # √öltimos 3 sorteos
        print("\n√öltimos 3 sorteos:")
        for _, sorteo in self.df.head(3).iterrows():
            numeros_sorteo = [sorteo['n1'], sorteo['n2'], sorteo['n3'], sorteo['n4'], sorteo['n5']]
            estrellas_sorteo = [sorteo['e1'], sorteo['e2']]
            print(f"{sorteo['fecha'].strftime('%d-%m-%Y')}: {'-'.join(map(str, numeros_sorteo))} Estrellas: {'-'.join(map(str, estrellas_sorteo))}")

    def get_trend_report(self, n_sorteos=10):
        """An√°lisis de tendencias recientes."""
        print(f"\nüìà AN√ÅLISIS DE TENDENCIAS (√∫ltimos {n_sorteos} sorteos)")
        
        ultimos = self.df.head(n_sorteos)
        
        # N√∫meros que est√°n apareciendo m√°s
        numeros_recientes = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros_recientes.extend(ultimos[col].tolist())
        
        freq_reciente = pd.Series(numeros_recientes).value_counts()
        
        # Comparar con frecuencia hist√≥rica
        numeros_historicos = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros_historicos.extend(self.df[col].tolist())
        
        freq_historica = pd.Series(numeros_historicos).value_counts()
        
        # Calcular tendencias
        tendencias = []
        for num, freq_rec in freq_reciente.items():
            freq_hist = freq_historica[num]
            tendencia = round((freq_rec/n_sorteos)/(freq_hist/len(self.df))*100 - 100, 2)
            tendencias.append([
                num,
                freq_rec,
                round(freq_rec/n_sorteos*100, 2),
                f"+{tendencia}%" if tendencia > 0 else f"{tendencia}%"
            ])
        
        tendencias.sort(key=lambda x: float(x[3].replace('+', '').replace('%', '')), reverse=True)
        
        print("\nN√∫meros en tendencia alcista:")
        print(tabulate(tendencias[:5],
                      headers=['N√∫mero', 'Apariciones', '% Sorteos', 'Tendencia'],
                      tablefmt='pretty'))
        
        # An√°lisis de patrones recientes
        print("\nPatrones recientes:")
        
        # Paridad
        pares_recientes = []
        for _, row in ultimos.iterrows():
            nums = [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]
            pares_recientes.append(sum(1 for n in nums if n % 2 == 0))
        
        pares_promedio = sum(pares_recientes)/len(pares_recientes)
        print(f"\nMedia de n√∫meros pares: {round(pares_promedio, 2)}")
        
        # Suma total
        sumas_recientes = []
        for _, row in ultimos.iterrows():
            nums = [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]
            sumas_recientes.append(sum(nums))
        
        suma_promedio = sum(sumas_recientes)/len(sumas_recientes)
        print(f"Suma total promedio: {round(suma_promedio, 2)}")

    def get_star_patterns(self):
        """An√°lisis espec√≠fico de patrones en las estrellas."""
        print("\n‚≠ê PATRONES DE ESTRELLAS")
        
        # Combinaciones m√°s frecuentes
        combinaciones = []
        for _, row in self.df.iterrows():
            combinaciones.append(tuple(sorted([row['e1'], row['e2']])))
        
        freq_combinaciones = pd.Series(combinaciones).value_counts()
        
        print("\nCombinaciones de estrellas m√°s frecuentes:")
        comb_results = []
        for (e1, e2), freq in freq_combinaciones.head(10).items():
            comb_results.append([
                f"{e1}-{e2}",
                freq,
                round(freq/len(self.df)*100, 2)
            ])
        
        print(tabulate(comb_results,
                      headers=['Combinaci√≥n', 'Frecuencia', '%'],
                      tablefmt='pretty'))
        
        # Paridad en estrellas
        print("\nDistribuci√≥n de paridad en estrellas:")
        paridad_estrellas = {
            "2 pares": 0,
            "2 impares": 0,
            "1 par, 1 impar": 0
        }
        
        for _, row in self.df.iterrows():
            e1_par = row['e1'] % 2 == 0
            e2_par = row['e2'] % 2 == 0
            
            if e1_par and e2_par:
                paridad_estrellas["2 pares"] += 1
            elif not e1_par and not e2_par:
                paridad_estrellas["2 impares"] += 1
            else:
                paridad_estrellas["1 par, 1 impar"] += 1
        
        for tipo, count in paridad_estrellas.items():
            print(f"{tipo}: {count} veces ({round(count/len(self.df)*100, 2)}%)")

    def get_number_gaps(self):
        """An√°lisis de huecos entre apariciones de n√∫meros."""
        print("\nüìä AN√ÅLISIS DE HUECOS ENTRE APARICIONES")
        
        resultados = []
        for numero in range(1, 51):
            apariciones = []
            for idx, row in self.df.iterrows():
                if numero in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]:
                    apariciones.append(idx)
            
            if len(apariciones) >= 2:
                huecos = [apariciones[i] - apariciones[i+1] for i in range(len(apariciones)-1)]
                resultados.append([
                    numero,
                    round(sum(huecos)/len(huecos), 2),
                    min(huecos),
                    max(huecos)
                ])
        
        resultados.sort(key=lambda x: x[1])  # Ordenar por hueco promedio
        
        print("\nEstad√≠sticas de huecos entre apariciones:")
        print(tabulate(resultados[:10],
                      headers=['N√∫mero', 'Hueco Promedio', 'M√≠nimo', 'M√°ximo'],
                      tablefmt='pretty'))

    def get_custom_range_analysis(self, start_date, end_date):
        """An√°lisis para un rango de fechas espec√≠fico."""
        rango_df = self.df[
            (self.df['fecha'] >= start_date) & 
            (self.df['fecha'] <= end_date)
        ].copy()
        
        if len(rango_df) == 0:
            print("No hay sorteos en el rango especificado")
            return
        
        print(f"\nüìÖ AN√ÅLISIS DEL {start_date.strftime('%d-%m-%Y')} AL {end_date.strftime('%d-%m-%Y')}")
        print(f"Sorteos analizados: {len(rango_df)}")
        
        # N√∫meros m√°s frecuentes en el rango
        numeros_rango = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros_rango.extend(rango_df[col].tolist())
        
        freq_rango = pd.Series(numeros_rango).value_counts()
        
        print("\nN√∫meros m√°s frecuentes en el periodo:")
        for num, freq in freq_rango.head(10).items():
            print(f"N√∫mero {num}: {freq} veces ({round(freq/len(rango_df)*100, 2)}%)")
        
        # Comparar con estad√≠sticas globales
        print("\nComparaci√≥n con estad√≠sticas globales:")
        numeros_global = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros_global.extend(self.df[col].tolist())
        
        freq_global = pd.Series(numeros_global).value_counts()
        
        comparacion = []
        for num in freq_rango.head(10).index:
            freq_r = freq_rango[num]/len(rango_df)
            freq_g = freq_global[num]/len(self.df)
            diff = round((freq_r/freq_g - 1)*100, 2)
            comparacion.append([
                num,
                round(freq_r*100, 2),
                round(freq_g*100, 2),
                f"+{diff}%" if diff > 0 else f"{diff}%"
            ])
        
        print(tabulate(comparacion,
                      headers=['N√∫mero', '% Periodo', '% Global', 'Diferencia'],
                      tablefmt='pretty'))

    def get_advanced_stats(self):
        """Muestra estad√≠sticas avanzadas del hist√≥rico de sorteos."""
        print("\nüìä ESTAD√çSTICAS AVANZADAS")
        
        # An√°lisis de frecuencia de n√∫meros
        numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            numeros.extend(self.df[col].tolist())
        freq = pd.Series(numeros).value_counts().sort_index()
        
        print("\nFrecuencia de n√∫meros:")
        freq_table = []
        for num, count in freq.items():
            percentage = (count / len(self.df)) * 100
            freq_table.append([num, count, f"{percentage:.2f}%"])
        print(tabulate(freq_table, headers=['N√∫mero', 'Apariciones', 'Porcentaje'], tablefmt='pretty'))
        
        # An√°lisis de paridad
        pares = sum(1 for n in numeros if n % 2 == 0)
        impares = len(numeros) - pares
        print(f"\nDistribuci√≥n de paridad:")
        print(f"N√∫meros pares: {pares} ({pares/len(numeros)*100:.2f}%)")
        print(f"N√∫meros impares: {impares} ({impares/len(numeros)*100:.2f}%)")
        
        # An√°lisis de suma
        sumas = self.df[['n1', 'n2', 'n3', 'n4', 'n5']].sum(axis=1)
        print(f"\nAn√°lisis de suma de n√∫meros:")
        print(f"Suma m√≠nima: {sumas.min()}")
        print(f"Suma m√°xima: {sumas.max()}")
        print(f"Suma promedio: {sumas.mean():.2f}")
        print(f"Suma m√°s frecuente: {sumas.mode().values[0]}")
        
        # An√°lisis de estrellas
        estrellas = []
        for col in ['e1', 'e2']:
            estrellas.extend(self.df[col].tolist())
        freq_estrellas = pd.Series(estrellas).value_counts().sort_index()
        
        print("\nFrecuencia de estrellas:")
        freq_estrellas_table = []
        for star, count in freq_estrellas.items():
            percentage = (count / len(self.df) / 2) * 100
            freq_estrellas_table.append([star, count, f"{percentage:.2f}%"])
        print(tabulate(freq_estrellas_table, headers=['Estrella', 'Apariciones', 'Porcentaje'], tablefmt='pretty'))
        
        # An√°lisis de intervalos entre apariciones
        print("\nIntervalos entre apariciones de n√∫meros:")
        for num in range(1, 51):
            apariciones = self.df[self.df[['n1', 'n2', 'n3', 'n4', 'n5']].eq(num).any(axis=1)]['fecha']
            if not apariciones.empty:
                intervalos = apariciones.diff().dt.days.dropna()
                print(f"N√∫mero {num}: Intervalo promedio = {intervalos.mean():.2f} d√≠as, M√°ximo = {intervalos.max()} d√≠as")

    def get_probability_analysis(self):
        """An√°lisis de probabilidades condicionales."""
        print("\nüé≤ AN√ÅLISIS DE PROBABILIDADES CONDICIONALES")

        # 1. Probabilidad despu√©s de n√∫meros espec√≠ficos
        print("\n1. Probabilidades despu√©s de n√∫meros espec√≠ficos:")
        
        for num in range(1, 51):
            siguiente_sorteo = []
            numero_anterior = False
            
            for _, row in self.df.iterrows():
                if numero_anterior:
                    siguiente_sorteo.extend([row['n1'], row['n2'], row['n3'], row['n4'], row['n5']])
                numero_anterior = num in [row['n1'], row['n2'], row['n3'], row['n4'], row['n5']]

            if siguiente_sorteo:
                freq = pd.Series(siguiente_sorteo).value_counts()
                if len(freq) >= 5:  # Solo mostrar si hay suficientes datos
                    print(f"\nDespu√©s del n√∫mero {num}, los m√°s probables son:")
                    for n, c in freq.head().items():
                        print(f"N√∫mero {n}: {round(c/len(siguiente_sorteo)*100, 2)}%")

        # 2. An√°lisis de transiciones
        print("\n2. Probabilidades de transici√≥n entre sorteos:")
        transiciones = []
        for i in range(len(self.df)-1):
            sorteo_actual = set([self.df.iloc[i][f'n{j}'] for j in range(1, 6)])
            sorteo_siguiente = set([self.df.iloc[i+1][f'n{j}'] for j in range(1, 6)])
            numeros_repetidos = len(sorteo_actual.intersection(sorteo_siguiente))
            transiciones.append(numeros_repetidos)

        freq_transiciones = pd.Series(transiciones).value_counts().sort_index()
        print("\nN√∫meros que se repiten entre sorteos consecutivos:")
        for nums, freq in freq_transiciones.items():
            print(f"{nums} n√∫meros: {freq} veces ({round(freq/len(transiciones)*100, 2)}%)")

    def get_seasonal_analysis(self):
        """An√°lisis de patrones estacionales."""
        print("\nüåû AN√ÅLISIS ESTACIONAL")

        # A√±adir informaci√≥n temporal
        self.df['a√±o'] = self.df['fecha'].dt.year
        self.df['mes'] = self.df['fecha'].dt.month
        self.df['estacion'] = self.df['fecha'].dt.month.map(
            {12: 'Invierno', 1: 'Invierno', 2: 'Invierno',
             3: 'Primavera', 4: 'Primavera', 5: 'Primavera',
             6: 'Verano', 7: 'Verano', 8: 'Verano',
             9: 'Oto√±o', 10: 'Oto√±o', 11: 'Oto√±o'}
        )

        # An√°lisis por estaci√≥n
        print("\n1. N√∫meros m√°s frecuentes por estaci√≥n:")
        for estacion in ['Primavera', 'Verano', 'Oto√±o', 'Invierno']:
            sorteos_estacion = self.df[self.df['estacion'] == estacion]
            numeros = []
            for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
                numeros.extend(sorteos_estacion[col].tolist())
            
            freq = pd.Series(numeros).value_counts()
            print(f"\n{estacion}:")
            for num, count in freq.head(5).items():
                print(f"N√∫mero {num}: {count} veces ({round(count/len(sorteos_estacion)*100, 2)}%)")

        # An√°lisis de meses
        print("\n2. Patrones mensuales:")
        patrones_mensuales = {}
        for mes in range(1, 13):
            sorteos_mes = self.df[self.df['mes'] == mes]
            numeros = []
            for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
                numeros.extend(sorteos_mes[col].tolist())
            
            media = np.mean(numeros)
            std = np.std(numeros)
            patrones_mensuales[mes] = {'media': media, 'std': std}

        for mes, stats in patrones_mensuales.items():
            nombre_mes = {
                1: 'Enero', 2: 'Febrero', 3: 'Marzo', 4: 'Abril',
                5: 'Mayo', 6: 'Junio', 7: 'Julio', 8: 'Agosto',
                9: 'Septiembre', 10: 'Octubre', 11: 'Noviembre', 12: 'Diciembre'
            }[mes]
            print(f"\n{nombre_mes}:")
            print(f"Media: {round(stats['media'], 2)}")
            print(f"Desviaci√≥n est√°ndar: {round(stats['std'], 2)}")

        # 3. Tendencias anuales
        print("\n3. Tendencias anuales:")
        for a√±o in sorted(self.df['a√±o'].unique()):
            sorteos_a√±o = self.df[self.df['a√±o'] == a√±o]
            numeros = []
            for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
                numeros.extend(sorteos_a√±o[col].tolist())
            
            print(f"\nA√±o {a√±o}:")
            print(f"Media: {round(np.mean(numeros), 2)}")
            print(f"N√∫mero m√°s frecuente: {pd.Series(numeros).value_counts().index[0]}")

    def show_frequent_numbers(self, top=10, top_numbers=None, top_stars=5):
        """Muestra los n√∫meros y estrellas m√°s frecuentes y ofrece opciones para generar combinaciones."""
        if top_numbers is None:
            top_numbers = top

        print(f"\nüî¢ N√öMEROS M√ÅS FRECUENTES (Top {top_numbers})")
        
        # Contar frecuencias de n√∫meros
        todos_numeros = []
        for col in ['n1', 'n2', 'n3', 'n4', 'n5']:
            todos_numeros.extend(self.df[col].tolist())
        
        freq_numeros = pd.Series(todos_numeros).value_counts()
        
        # Preparar resultados de n√∫meros
        resultados_numeros = []
        numeros_frecuentes = []
        for num, count in freq_numeros.head(top_numbers).items():
            porcentaje = round(count / len(self.df) * 100, 2)
            resultados_numeros.append([num, count, f"{porcentaje}%"])
            numeros_frecuentes.append(num)
        
        # Mostrar tabla de n√∫meros
        print(tabulate(resultados_numeros,
                       headers=['N√∫mero', 'Apariciones', '% Sorteos'],
                       tablefmt='pretty'))
        
        # Contar frecuencias de estrellas
        todas_estrellas = []
        for col in ['e1', 'e2']:
            todas_estrellas.extend(self.df[col].tolist())
        
        freq_estrellas = pd.Series(todas_estrellas).value_counts()
        
        # Preparar resultados de estrellas
        resultados_estrellas = []
        estrellas_frecuentes = []
        for star, count in freq_estrellas.head(top_stars).items():
            porcentaje = round(count / len(self.df) * 100, 2)
            resultados_estrellas.append([star, count, f"{porcentaje}%"])
            estrellas_frecuentes.append(star)
        
        # Mostrar tabla de estrellas
        print(f"\n‚≠ê ESTRELLAS M√ÅS FRECUENTES (Top {top_stars})")
        print(tabulate(resultados_estrellas,
                       headers=['Estrella', 'Apariciones', '% Sorteos'],
                       tablefmt='pretty'))
        
        # Generar combinaciones
        print("\n¬øDesea generar todas las combinaciones posibles con estos n√∫meros y estrellas?")
        respuesta = input("Ingrese 'S' para s√≠, cualquier otra tecla para no: ").strip().upper()
        
        if respuesta == 'S':
            combinaciones_numeros = list(combinations(numeros_frecuentes, 5))
            combinaciones_estrellas = list(combinations(estrellas_frecuentes, 2))
            
            todas_combinaciones = list(product(combinaciones_numeros, combinaciones_estrellas))
            
            df_combinaciones = pd.DataFrame([
                (*nums, *stars) for nums, stars in todas_combinaciones
            ], columns=['n1', 'n2', 'n3', 'n4', 'n5', 'e1', 'e2'])
            
            print(f"\nSe han generado {len(todas_combinaciones)} combinaciones.")
            print("\n¬øEn qu√© formato desea exportar las combinaciones?")
            print("1. Excel")
            print("2. CSV")
            print("3. JSON")
            
            opcion = input("Seleccione una opci√≥n (1-3): ").strip()
            
            filename = input("Ingrese el nombre del archivo (sin extensi√≥n): ").strip()
            
            try:
                if opcion == '1':
                    df_combinaciones.to_excel(f"{filename}.xlsx", index=False)
                    print(f"Combinaciones exportadas a {filename}.xlsx")
                elif opcion == '2':
                    df_combinaciones.to_csv(f"{filename}.csv", index=False)
                    print(f"Combinaciones exportadas a {filename}.csv")
                elif opcion == '3':
                    df_combinaciones.to_json(f"{filename}.json", orient='records')
                    print(f"Combinaciones exportadas a {filename}.json")
                else:
                    print("Opci√≥n no v√°lida. No se ha realizado la exportaci√≥n.")
            except Exception as e:
                print(f"Error al exportar: {str(e)}")


